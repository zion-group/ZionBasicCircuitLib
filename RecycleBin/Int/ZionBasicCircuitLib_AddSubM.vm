///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Macro name  : ZionBasicCircuitLib_AddSubM
// Author      : Wenheng Ma
// Date        : 2019-10-14
// Version     : 1.0
// Parameter   : None
// Description :
//   Addition and subtraction computing. One adder is reused in both of the computation.
//   If 'addEn' is 1, calculate the addition. If 'subEn' is 1, calculate the subtraction. 
//   If 'addEn' and 'subEn' are both 0, result is 0. If they are both 0, result is undefined.
//   Both of 'addEn' and 'subEn' must be 1 bit signal,. Otherwise, the result is undefined.
// Modification History:
//    Date    |   Author   |   Version   |   Change Description
//======================================================================================================================
// 2019-10-17 | Wenheng Ma |     1.0     |   Original Version
// 2019-10-29 |  Yudi Gao  |     2.0     |   add testbench
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

`ifndef Disable_ZionBasicCircuitLib_AddSubM
  `ifdef ZionBasicCircuitLib_AddSubM
    `__DefErr__(ZionBasicCircuitLib_AddSubM)
  `else
    `define ZionBasicCircuitLib_AddSubM(addEn,subEn,datA,datB) (({$bits(datA){addEn & subEn}} & datA) + (({$bits(datB){subEn}} & datB)|({$bits(datB){addEn}} & datB)) + subEn)
  `endif
`endif
